# Healthcare Translation Web App with Generative AI Project Intelligence

This file captures important patterns, preferences, and project intelligence that helps work more effectively with the Healthcare Translation Web App with Generative AI project.

## Project Patterns
- Use React hooks for state management (useState, useEffect, useContext)
- Prefer functional components over class components
- Mobile-first approach for all UI components
- Group related functionality into custom hooks for reusability

## User Preferences
- Prioritize simplicity and accessibility in the UI
- Optimize for touch interactions on mobile devices
- Minimize latency for real-time interactions
- Clear visual feedback for all operations (recording, translating, etc.)

## Critical Implementation Paths
- Speech recognition via Web Speech API
- Translation through OpenAI API
- State management for dual transcripts
- Responsive UI for various device sizes
- Error handling for API failures

## Known Challenges
- Medical terminology accuracy in translations
- Cross-browser compatibility for speech recognition
- API rate limits for OpenAI
- Security requirements for healthcare data
- Performance optimization for real-time translation

## Tool Usage
- Next.js for React framework
- TailwindCSS for styling
- Vercel for deployment
- Web Speech API for voice recognition and TTS
- OpenAI API for translation

## Project Evolution
The Healthcare Translation Web App with Generative AI project is a rapid prototype development with a 48-hour timeline. The initial focus is on core functionality rather than comprehensive features. The project may evolve to include authentication, persistent storage, and EHR integration in future versions. 